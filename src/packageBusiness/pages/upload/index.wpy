<template>
  <div class="container">
    <div class="content">
      <div class="header">
        <top-bar title="图片上传" styl="{{topBar.style}}"/>
      </div>
      <div class="body">
        <div class="context">
          <div class="upload">
            <div class="upload-content">
              <div class="upload-header"></div>
              <div class="upload-body">
                <div class="upload-cut">
                  <div class="upload-cut-touch" @tap="onHandleShowImage"></div>
                  <div class="upload-cut-border">
                    <div class="upload-border"></div>
                    <div class="upload-border"></div>
                    <div class="upload-border"></div>
                    <div class="upload-border"></div>
                  </div>
                  <div class="upload-cut-mask"></div>
                  <div class="upload-cut-image">
                    <img class="upload-image"
                         :src="touchImage.src"
                         style="{{touchImage.style}}"
                         @load="onHandleLoadImage"/>
                  </div>
                  <div class="upload-cut-canvas">
                    <canvas canvas-id="canvas" class="canvas"/>
                  </div>
                </div>
              </div>
              <div class="upload-footer"></div>
            </div>
          </div>
        </div>
      </div>
      <div class="footer">
        <div class="footer-row row">
          <div class="footer-col col-6">
            <div class="btn btn-upload" @tap="onHandleChooseImage">上传图片</div>
          </div>
          <div class="footer-col col-6">
            <div class="btn btn-confirm" @tap="onHandleConfirmImage">生成图片</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script type="text/ecmascript-6">
  import wepy from '@wepy/core';
  import store from '../../../store';
  import Toast from '../../../mixins/toast';
  import Route from '../../../mixins/route';
  import Loading from '../../../mixins/loading';
  import {mapState, mapActions} from '@wepy/redux';
  import * as controller from './controller';
  import * as $config from '../../../config';

  wepy.page({
    store,

    mixins: [Toast, Route, Loading],

    data: {
      topBar: {
        style: 'background-color:transparent;color:#FFFFFF;'
      },
      touchImage: {
        src: '',
        style: '',
        width: '',
        height: '',
        initStyle: ''
      },
      touches: {
        length: 0,
        clientX: 0,
        clientY: 0,
        offsetX: 0,
        offsetY: 0,
        totalOffsetX: 0,
        totalOffsetY: 0,
        storageOffsetX: 0,
        storageOffsetY: 0
      },
      canvas: {
        ctx: null,
        width: 750,
        height: 750,
        destWidth: 750,
        destHeight: 750,
        selector: 'canvas',
        mark: {
          path: '',
          width: 0,
          height: 0
        }
      }
    },

    computed: {
      ...mapState(controller.STATES)
    },

    methods: {
      ...mapActions(controller.ACTIONS),
      onHandleChooseImage() {
        wx.chooseImage({
          count: 1,
          sizeType: ['original'],
          success: (res) => {
            this.showLoading();
            this.touchImage.src = res.tempFilePaths[0];
            wx.getImageInfo({
              src: this.touchImage.src,
              success: (res) => {
                res = res || {};
                this.onHandleClearTouches();
                this.onHandleRenderImage(res);
                console.log(res);
              },
              fail: (err) => {
                console.log(err);
              }
            });
            console.log(res);
          },
          fail: (err) => {
            console.log(err);
          }
        });
      },
      onHandleConfirmImage() {
        const {src} = this.touchImage;
        if (src) {
          this.onHandleDrawImage();
          this.onHandleDrawMark();
          this.exeAjaxInsertImage();
        } else {
          this.showToast('请先选择上传图片');
        }
      },
      onHandleRenderImage(res) {
        let rateWidth = 0;
        let rateHeight = 0;
        const {width, height} = res;
        const rate = width / height;
        if (width > height) {
          rateWidth = 520;
          rateHeight = 520 / rate;
        } else if (width < height) {
          rateWidth = 520 * rate;
          rateHeight = 520;
        } else {
          rateWidth = 520;
          rateHeight = 520;
        }
        this.touchImage.width = rateWidth / 2;
        this.touchImage.height = rateHeight / 2;
        this.touchImage.style =
          'width:' + (rateWidth / 2) + 'px;' +
          'height:' + (rateHeight / 2) + 'px;' +
          'margin-left:' + (-rateWidth / 2 / 2) + 'px;' +
          'margin-top:' + (-rateHeight / 2 / 2) + 'px;';
        this.touchImage.initStyle = this.touchImage.style;
      },
      onHandleLoadMark() {
        wx.getImageInfo({
          src: $config.DEFAULT_WATER,
          success: (res) => {
            res = res || {};
            const {path, width, height} = res;
            this.canvas.mark = {path, width, height};
          },
          fail: (err) => {
            console.log(err);
            this.showToast('图片加载失败');
          }
        });
      },
      onHandleDrawMark() {
        const {mark} = this.canvas;
        const {path, width, height} = mark;
        if (path) {
          this.canvas.ctx.drawImage(path, 0, 0, width, height);
        }
      },
      onHandleDrawImage() {
        const {selector} = this.canvas;
        const {src, width, height} = this.touchImage;
        const {storageOffsetX, storageOffsetY} = this.touches;
        const offsetX = (width - 520 / 2) / 2 + storageOffsetX;
        const offsetY = (height - 520 / 2) / 2 + storageOffsetY;
        const rate = this.canvas.width / (520 / 2);
        this.canvas.ctx = wx.createCanvasContext(selector);
        this.canvas.ctx.draw();
        this.canvas.ctx.drawImage(src, -offsetX * rate, -offsetY * rate, width * rate, height * rate);
      },
      onHandleShowImage() {
        const {src} = this.touchImage;
        if (src) {
          this.onHandleDrawImage();
          this.onHandlePreviewImage();
        }
      },
      onHandlePreviewImage() {
        this.onHandleTempFilePath()
          .then((res) => {
            res = res || {};
            const {tempFilePath} = res;
            wx.previewImage({
              current: tempFilePath,
              urls: [tempFilePath]
            });
          })
          .catch((err) => {
            console.log(err);
          });
      },
      onHandleLoadImage() {
        this.hideLoading();
      },
      onHandleTempFilePath() {
        return new Promise((resolve, reject) => {
          const {selector, width, height, destWidth, destHeight} = this.canvas;
          this.canvas.ctx.draw(true, () => {
            wx.canvasToTempFilePath({
              width,
              height,
              destWidth,
              destHeight,
              fileType: 'jpg',
              canvasId: selector,
              success: (res) => {
                resolve(res);
              },
              fail: (err) => {
                reject(err);
              }
            });
          });
        });
      },
      onHandleClearTouches() {
        for (let key in this.touches) {
          this.touches[key] = 0;
        }
      },
      exeAjaxInsertImage() {
        this.onHandleTempFilePath()
          .then((res) => {
            res = res || {};
            const {tempFilePath} = res;
            const params = {filePath: tempFilePath};
            this.showLoading('正在上传');
            this.ajaxInsertImage(params)
              .then((res) => {
                this.hideLoading();
                res = res || {};
                const {success} = res.payload;
                if (success) {
                  this.navigateBack(1);
                }
                console.log(res);
              })
              .catch((err) => {
                this.hideLoading();
                this.showToast('图片上传失败，请重试');
                console.log(err);
              });
          })
          .catch((err) => {
            console.log(err);
          });
      }
    },

    onLoad() {
      this.onHandleLoadMark();
    }
  });
</script>

<style scoped lang="less">
  @import "../../../assets/less/variable";
  @import "../../../assets/less/@media";

  @btnHeight: unit(90, rpx);

  .container {
    min-height: 100vh;
    .content {
      height: 100vh;
      .header {
      }
      .body {
        height: 100%;
        position: relative;
        .context {
          height: 100%;
          padding-top: 65px;
          padding-bottom: 105px;
          .upload {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 900;
            background-color: #000000;
            .upload-content {
              .upload-header {
              }
              .upload-body {
                .upload-cut {
                  width: 260px;
                  height: 260px;
                  position: fixed;
                  top: 50%;
                  left: 50%;
                  z-index: 901;
                  margin-top: -130px;
                  margin-left: -130px;
                  background-color: rgba(255, 255, 255, .15);
                  .upload-cut-touch {
                    width: 100%;
                    height: 100%;
                    position: absolute;
                    top: 0;
                    left: 0;
                    z-index: 905;
                  }
                  .upload-cut-border {
                    width: 100%;
                    height: 100%;
                    position: absolute;
                    top: 0;
                    left: 0;
                    z-index: 904;
                    .upload-border {
                      position: absolute;
                      width: 15px;
                      height: 15px;
                      border-color: @theme2 !important;
                      &:nth-child(1) {
                        top: -2px;
                        left: -2px;
                        border-top: 2px solid @white;
                        border-left: 2px solid @white;
                      }
                      &:nth-child(2) {
                        top: -2px;
                        right: -2px;
                        border-top: 2px solid @white;
                        border-right: 2px solid @white;
                      }
                      &:nth-child(3) {
                        bottom: -2px;
                        left: -2px;
                        border-bottom: 2px solid @white;
                        border-left: 2px solid @white;
                      }
                      &:nth-child(4) {
                        bottom: -2px;
                        right: -2px;
                        border-bottom: 2px solid @white;
                        border-right: 2px solid @white;
                      }
                    }
                  }
                  .upload-cut-mask {
                    position: fixed;
                    top: 0;
                    left: 0;
                    z-index: 903;
                    width: 100%;
                    height: 100%;
                    background-color: @transparent;
                    border-left: calc((100vw - 260px) / 2) solid rgba(0, 0, 0, .5);
                    border-right: calc((100vw - 260px) / 2) solid rgba(0, 0, 0, 0.5);
                    border-top: calc((100vh - 260px) / 2) solid rgba(0, 0, 0, .5);
                    border-bottom: calc((100vh - 260px) / 2) solid rgba(0, 0, 0, 0.5);
                  }
                  .upload-cut-image {
                    position: absolute;
                    top: 0;
                    left: 0;
                    z-index: 902;
                    width: 100%;
                    height: 100%;
                    .upload-image {
                      position: absolute;
                      top: 50%;
                      left: 50%;
                      width: 100%;
                      height: 100%;
                    }
                  }
                  .upload-cut-canvas {
                    position: fixed;
                    top: -750px;
                    left: 0;
                    z-index: 1000;
                    width: 750px;
                    height: 750px;
                    visibility: hidden;
                    .canvas {
                      width: 100%;
                      height: 100%;
                      background-color: transparent;
                    }
                  }
                }
              }
              .upload-footer {
              }
            }
          }
        }
      }
      .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        z-index: 1000;
        .footer-row {
          padding: unit(30, rpx);
          .footer-col {
            padding: unit(30, rpx);
          }
        }
        .btn {
          margin: 0 auto;
          overflow: hidden;
          height: @btnHeight;
          line-height: @btnHeight;
          border-radius: @btnHeight;
          box-shadow: 0 0 15px @boxShadow05;
          background: -webkit-linear-gradient(left, @theme1, @theme2);
          font-size: @fontSize32;
          text-align: center;
          color: @white;
        }
      }
    }
  }

</style>

<config>
  {
  disableScroll:true,
  navigationStyle:'custom',
  navigationBarTextStyle:'white',
  usingComponents: {
  'top-bar': '../../../components/top-bar/top-bar'
  }
  }
</config>
