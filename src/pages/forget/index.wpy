<template>
  <div class="container">
    <div class="content">
      <div class="header">
        <top-bar title="密码重置"/>
      </div>
      <div class="body">
        <div class="context fade">
          <scroll-view class="scroll-view" scroll-y="{{isScroll}}">
            <div class="scroll-content">
              <div class="module">
                <div class="module-content">
                  <div class="module-header">
                  </div>
                  <div class="module-body">
                    <div class="module-row row">
                      <div class="module-col col-12">
                        <label class="form-label">手机号</label>
                      </div>
                      <div class="module-col col-8">
                        <input class="form-input" v-model="phone" type="number"
                               placeholder="请输入手机号"/>
                      </div>
                      <div class="module-col col-4">
                        <div class="btn-send" v-if="!isSend" @tap="onHandleSelectVcode">
                          <div class="btn-text">获取验证码</div>
                        </div>
                        <div class="btn-send disable" v-if="isSend">
                          <div class="btn-text">{{time}}秒后重试</div>
                        </div>
                      </div>
                    </div>
                    <div class="module-row row">
                      <div class="module-col col-12">
                        <label class="form-label">验证码</label>
                      </div>
                      <div class="module-col col-12">
                        <input class="form-input" v-model="code" type="number"
                               placeholder="请输入验证码"/>
                      </div>
                    </div>
                    <div class="module-row row">
                      <div class="module-col col-12">
                        <label class="form-label">新密码</label>
                      </div>
                      <div class="module-col col-12">
                        <input class="form-input" v-model="password" type="password"
                               placeholder="请输入新密码"/>
                      </div>
                    </div>
                  </div>
                  <div class="module-footer">
                    <div class="btn btn-confirm" @tap="onHandleConfirm">确定</div>
                  </div>
                </div>
              </div>
            </div>
          </scroll-view>
        </div>
      </div>
      <div class="footer"></div>
    </div>
  </div>
</template>

<script type="text/ecmascript-6">
  import wepy from '@wepy/core';
  import store from '../../store';
  import Toast from '../../mixins/toast';
  import Route from '../../mixins/route';
  import Loading from '../../mixins/loading';
  import {mapState, mapActions} from '@wepy/redux';
  import * as controller from './controller';
  import * as $routes from '../../router';

  wepy.page({
    store,

    mixins: [Toast, Route, Loading],

    data: {
      code: '',
      vCode: '',
      phone: '',
      password: '',
      time: 60,
      timer: null,
      isSend: false,
      isScroll: true
    },

    computed: {
      ...mapState(controller.STATES)
    },

    methods: {
      ...mapActions(controller.ACTIONS),
      onHandleCheckEmpty() {
        let result = false;
        const {phone, code, password, vCode} = this;
        const regExp = /^1{1}\d{10}$/;
        if (!phone) {
          this.showToast('请输入手机号');
        } else if (!code) {
          this.showToast('请输入验证码');
        } else if (!password) {
          this.showToast('请输入密码');
        } else if (!regExp.test(phone)) {
          this.showToast('手机号格式不正确');
        } else if (code !== vCode) {
          this.showToast('验证码输入不正确');
        } else if (password.length < 6) {
          this.showToast('密码长度不能小于6位');
        } else {
          result = true;
        }
        return result;
      },
      onHandleCountDown() {
        this.timer = setTimeout(() => {
          this.time--;
          if (this.time <= 0) {
            this.isSend = false;
            clearInterval(this.timer);
          } else {
            this.onHandleCountDown();
          }
        }, 1000);
      },
      onHandleSelectVcode() {
        const {phone} = this;
        const regExp = /^1{1}\d{10}$/;
        if (!phone) {
          this.showToast('请输入手机号');
        } else if (!regExp.test(phone)) {
          this.showToast('手机号格式不正确');
        } else {
          this.time = 60;
          this.isSend = true;
          this.onHandleCountDown();
          this.exeAjaxSelectVcode();
        }
      },
      onHandleConfirm() {
        if (this.onHandleCheckEmpty()) {
          this.exeAjaxUpdateForget();
        }
      },
      exeAjaxUpdateForget() {
        this.showLoading();
        const params = this.getParams();
        this.ajaxUpdateForget(params)
          .then((res) => {
            this.hideLoading();
            res = res || {};
            const {success, data} = res.payload;
            if (success) {
            } else {
            }
          })
          .catch((err) => {
            this.hideLoading();
            this.showToast('服务器连接失败');
            console.log(err);
          });
      },
      exeAjaxSelectVcode() {
        this.showLoading();
        const {phone} = this;
        const params = {
          phone
        };
        this.ajaxSelectVcode(params)
          .then((res) => {
            this.hideLoading();
            res = res || {};
            const {success, data} = res.payload;
            if (success) {
              const {code} = data;
              this.vCode = code;
            } else {
              this.showToast('验证码发送失败');
            }
          })
          .catch((err) => {
            this.hideLoading();
            this.showToast('服务器连接失败');
            console.log(err);
          });
      },
      getParams() {
        const {phone, code, password} = this;
        const params = {
          phone,
          code,
          password
        };
        return params;
      }
    },

    onLoad() {
    }
  });
</script>

<style scoped lang="less">
  @import "../../assets/less/@media";
  @import "../../assets/less/variable";

  @height: unit(110, rpx);

  .container {
    min-height: 100vh;
    .content {
      height: 100vh;
      .header {
      }
      .body {
        height: 100%;
        position: relative;
        .context {
          height: 100%;
          padding-top: 65px;
          .scroll-view {
            height: 100%;
            .scroll-content {
              .module {
                background-color: @transparent;
                .module-content {
                  .module-header {
                  }
                  .module-body {
                    .module-row {
                      background-color: @white;
                      .module-col {
                        font-size: @fontSize32;
                        .form-label {
                          display: block;
                          height: unit(70, rpx);
                          line-height: unit(70, rpx);
                          background-color: @bgColor;
                          padding: 0 unit(30, rpx);
                          font-size: @fontSize28;
                          font-weight: bold;
                        }
                        .form-input {
                          height: @height;
                          padding: 0 unit(30, rpx);
                        }
                        .btn-send {
                          height: @height;
                          line-height: @height;
                          text-align: center;
                          .btn-text {
                            width: 100%;
                            height: unit(50, rpx);
                            display: inline-block;
                            vertical-align: middle;
                            line-height: unit(50, rpx);
                            border-left: 0.5px solid @borderColor2;
                          }
                          &.disable {
                            color: @fontColor3;
                          }
                        }
                      }
                    }
                  }
                  .module-footer {
                    padding: unit(30, rpx);
                    .btn-confirm {
                      height: @height;
                      line-height: @height;
                      border-radius: @borderRadius15;
                      background: -webkit-linear-gradient(left, @theme1, @theme2);
                      font-size: @fontSize36;
                      letter-spacing: 2px;
                      text-align: center;
                      color: @white;
                    }
                  }
                }
              }
            }
          }
        }
      }
      .footer {
      }
    }
  }
</style>

<config>
  {
  navigationStyle:'custom',
  usingComponents: {
  'top-bar': '../../components/top-bar/top-bar',
  'waitting': '../../components/waitting/waitting'
  }
  }
</config>
