<template>
  <div class="container">
    <div class="content">
      <div class="header">
        <div class="logo">
          <div class="bg"></div>
          <img src="../../assets/images/logo@2x.png" mode="aspectFit"/>
        </div>
      </div>
      <div class="body">
        <div class="context fade">
          <div class="form-group">
            <label class="form-label iconfont icon-username"></label>
            <input class="form-input" v-model="userName" type="text"
                   placeholder="请输入用户名"/>
          </div>
          <div class="form-group">
            <label class="form-label iconfont icon-password"></label>
            <input class="form-input" v-model="passWord" type="text" :password="true"
                   placeholder="请输入密码"/>
          </div>
          <div class="form-group">
            <div class="form-row row">
              <div class="form-col col-6">
                <div class="form-check" @tap="onHandleSelectCheck">
                  <div class="form-check-icon iconfont icon-right"
                       :class="{'checked':checked}"></div>
                  <label class="form-check-text">记住密码</label>
                </div>
              </div>
              <div class="form-col col-6">
                <label class="form-forget">忘记密码</label>
              </div>
            </div>
          </div>
          <div class="form-group">
            <div class="btn btn-login" @tap="onHandleSelectLogin">登录</div>
          </div>
        </div>
      </div>
      <div class="footer"></div>
    </div>
  </div>
</template>

<script type="text/ecmascript-6">
  import wepy from '@wepy/core';
  import store from '../../store';
  import Toast from '../../mixins/toast';
  import Route from '../../mixins/route';
  import Loading from '../../mixins/loading';
  import {mapState, mapActions} from '@wepy/redux';
  import * as $storage from '../../utils/storage';
  import * as controller from './controller';
  import * as $routes from '../../router';

  wepy.page({
    store,

    mixins: [Route, Toast, Loading],

    data: {
      userName: '',
      passWord: '',
      checked: false
    },

    computed: {
      ...mapState(controller.STATES)
    },

    methods: {
      ...mapActions(controller.ACTIONS),
      onHandleCheckEmpty() {
        let result = false;
        const {userName, passWord} = this;
        if (!userName) {
          this.showToast('请输入用户名');
        } else if (!passWord) {
          this.showToast('请输入密码');
        } else {
          result = true;
        }
        return result;
      },
      onHandleRenderUser() {
        const user = $storage.getItem('user');
        const {userName, passWord} = user || {};
        if (userName && passWord) {
          this.userName = userName;
          this.passWord = passWord;
          this.checked = true;
        }
      },
      onHandleSelectCheck() {
        if (this.checked) {
          this.checked = false;
        } else {
          this.checked = true;
        }
      },
      onHandleSelectLogin() {
        if (this.onHandleCheckEmpty()) {
          this.exeAjaxSelectLogin();
        }
      },
      exeAjaxSelectLogin() {
        this.showLoading();
        const {userName, passWord, checked} = this;
        const params = {
          userName,
          passWord
        };
        this.ajaxSelectLogin(params)
          .then((res) => {
            res = res || {};
            const {success, data} = res.payload;
            if (success) {
              if (checked) {
                $storage.setItem('user', data);
              } else {
                $storage.removeItem('user', data);
              }
              this.exeAjaxSelectIndex();
            } else {
              this.hideLoading();
              this.showToast('登录失败，请重试');
            }
            console.log(res);
          })
          .catch((err) => {
            this.hideLoading();
            this.showToast('服务器连接失败');
            console.log(err);
          });
      },
      exeAjaxSelectIndex() {
        const {busId} = this.isLogin;
        const params = {busId};
        this.ajaxSelectIndex(params)
          .then((res) => {
            this.hideLoading();
            res = res || {};
            const {res1, res2} = res.payload;
            const success = res1.success && res2.success;
            if (success) {
              this.redirectTo($routes.INDEX.path);
            } else {
              this.showToast('加载失败，请重试');
            }
          })
          .catch((err) => {
            this.hideLoading();
            this.showToast('加载失败，请重试');
            console.log(err);
          });
      }
    },

    onLoad() {
      this.onHandleRenderUser();
    }
  });
</script>

<style scoped lang="less">
  @import "../../assets/less/variable";
  @import "../../assets/less/common";

  @height: unit(100, rpx);

  .container {
    min-height: 100vh;
    background-color: @white;
    .content {
      height: 100vh;
      .header {
        .logo {
          .bg {
            position: fixed;
            top: unit(-650, rpx);
            left: unit(-1000, rpx);
            width: unit(2000, rpx);
            height: unit(1000, rpx);
            transform: rotate(-10deg);
            box-shadow: 0 0 15px @boxShadow05;
            background: -webkit-linear-gradient(left, @theme1, @theme2);
          }
          image {
            width: unit(250, rpx);
            height: unit(80, rpx);
            position: fixed;
            top: unit(110, rpx);
            left: 50%;
            margin-left: unit(-125, rpx);
          }
        }
      }
      .body {
        height: 100%;
        position: relative;
        &:before {
          content: '';
          height: 100%;
          display: inline-block;
          vertical-align: middle;
        }
        .context {
          width: 100%;
          display: inline-block;
          vertical-align: middle;
          padding: unit(200, rpx) unit(75, rpx) 0;
          border-radius: @borderRadius30;
          font-size: @fontSize32;
          color: @fontColor1;
          .form-group {
            position: relative;
            margin-bottom: unit(60, rpx);
            .form-label {
              position: absolute;
              top: 0;
              left: 0;
              width: unit(60, rpx);
              height: @height;
              line-height: @height;
              font-size: @fontSize46;
              text-align: left;
            }
            .form-input {
              height: @height;
              padding-left: unit(60, rpx);
              border-bottom: 0.5px solid @borderColor1;
            }
            .form-forget {
              float: right;
              height: unit(44, rpx);
              line-height: unit(44, rpx);
              text-decoration: underline;
            }
            .form-check {
              display: flex;
              .form-check-icon {
                width: unit(44, rpx);
                height: unit(44, rpx);
                line-height: unit(44, rpx);
                background-color: @unCheck;
                border-radius: @borderRadius100;
                transition: all 150ms ease;
                font-size: @fontSize20;
                color: @borderColor1;
                text-align: center;
                &.checked {
                  background: -webkit-linear-gradient(left, @theme1, @theme2);
                  color: @white;
                }
              }
              .form-check-text {
                height: unit(44, rpx);
                line-height: unit(44, rpx);
                padding-left: unit(10, rpx);
              }
            }
            .btn-login {
              height: @height;
              overflow: hidden;
              line-height: @height;
              border-radius: @height;
              box-shadow: 0 0 15px @boxShadow05;
              background: -webkit-linear-gradient(left, @theme1, @theme2);
              font-size: @fontSize40;
              letter-spacing: 2px;
              text-align: center;
              color: @white;
            }
            &:last-child {
              margin: 0;
            }
          }
        }
      }
      .footer {
      }
    }
  }
</style>

<config>
  {
  disableScroll:true,
  navigationStyle:'custom'
  }
</config>
